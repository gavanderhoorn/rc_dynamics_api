// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: roboception/msgs/frame.proto

#ifndef PROTOBUF_roboception_2fmsgs_2fframe_2eproto__INCLUDED
#define PROTOBUF_roboception_2fmsgs_2fframe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "roboception/msgs/pose_stamped.pb.h"
// @@protoc_insertion_point(includes)

namespace roboception {
namespace msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_roboception_2fmsgs_2fframe_2eproto();
void protobuf_AssignDesc_roboception_2fmsgs_2fframe_2eproto();
void protobuf_ShutdownFile_roboception_2fmsgs_2fframe_2eproto();

class Frame;

// ===================================================================

class Frame : public ::google::protobuf::Message {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  Frame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .roboception.msgs.PoseStamped pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::roboception::msgs::PoseStamped& pose() const;
  inline ::roboception::msgs::PoseStamped* mutable_pose();
  inline ::roboception::msgs::PoseStamped* release_pose();
  inline void set_allocated_pose(::roboception::msgs::PoseStamped* pose);

  // optional string parent = 2;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 2;
  inline const ::std::string& parent() const;
  inline void set_parent(const ::std::string& value);
  inline void set_parent(const char* value);
  inline void set_parent(const char* value, size_t size);
  inline ::std::string* mutable_parent();
  inline ::std::string* release_parent();
  inline void set_allocated_parent(::std::string* parent);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:roboception.msgs.Frame)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::roboception::msgs::PoseStamped* pose_;
  ::std::string* parent_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_roboception_2fmsgs_2fframe_2eproto();
  friend void protobuf_AssignDesc_roboception_2fmsgs_2fframe_2eproto();
  friend void protobuf_ShutdownFile_roboception_2fmsgs_2fframe_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// ===================================================================


// ===================================================================

// Frame

// optional .roboception.msgs.PoseStamped pose = 1;
inline bool Frame::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Frame::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Frame::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Frame::clear_pose() {
  if (pose_ != NULL) pose_->::roboception::msgs::PoseStamped::Clear();
  clear_has_pose();
}
inline const ::roboception::msgs::PoseStamped& Frame::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::roboception::msgs::PoseStamped* Frame::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::roboception::msgs::PoseStamped;
  return pose_;
}
inline ::roboception::msgs::PoseStamped* Frame::release_pose() {
  clear_has_pose();
  ::roboception::msgs::PoseStamped* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Frame::set_allocated_pose(::roboception::msgs::PoseStamped* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
}

// optional string parent = 2;
inline bool Frame::has_parent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Frame::set_has_parent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Frame::clear_has_parent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Frame::clear_parent() {
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    parent_->clear();
  }
  clear_has_parent();
}
inline const ::std::string& Frame::parent() const {
  return *parent_;
}
inline void Frame::set_parent(const ::std::string& value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Frame::set_parent(const char* value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Frame::set_parent(const char* value, size_t size) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Frame::mutable_parent() {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  return parent_;
}
inline ::std::string* Frame::release_parent() {
  clear_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parent_;
    parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Frame::set_allocated_parent(::std::string* parent) {
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  if (parent) {
    set_has_parent();
    parent_ = parent;
  } else {
    clear_has_parent();
    parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 3;
inline bool Frame::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Frame::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Frame::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Frame::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Frame::name() const {
  return *name_;
}
inline void Frame::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Frame::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Frame::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Frame::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Frame::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Frame::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace roboception

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_roboception_2fmsgs_2fframe_2eproto__INCLUDED
